package com.pepej.prison.item.fuel;


/**
 * Интерфейс для описания поведения механизмов, которым требуется топливо для работы
 */
public interface FuelConsumer {

    /**
     * Проверяет, что механизм может потребить столько топлива
     * (в механизме есть необходимое кол-во топлива)
     * @param amount - количество топлива
     * @return true если в механизме есть необходимое кол-во топлива
     */
    boolean canConsumeFuel(int amount);

    /**
     * Множитель потребления топлива, у разных механизмов
     * разное кол-во потребляемого топлива, чем лучше мех. тем болье топлива
     * @return множитель потребления топлива
     */
    double fuelCostMultiplier();

    /**
     * Потребляет указанное кол-во топлива механизмом
     * @param amount - кол-во топлива для потребления
     * @return true если механизм может потребить необходимое кол-во топлива
     * см. {@link #canConsumeFuel(int)}
     */
    boolean consumeFuel(int amount);

    /**
     * Возвраащет кол-во оставшегося топлива в механизме
     * @return кол-во оставшегося топлива в механизме
     */
    int remainingFuel();

    /**
     * Заполняет бак механизма на указаное кол-во топлива.
     * Если кол-во топлива после пополнения будет превышать
     * {@link #getTankSize()} то топливо будет залито до полного бака
     * а остаток будет возвращан из метода
     * @param amount кол-во топлива для пополнения
     * @return остаток от пополнения топлива, если кол-во превысило размер бака
     */
    int fillUp(int amount);

    /**
     * Максимальный размер бака у механизма
     * @return макс. размер бака у механизма
     */
    int getTankSize();


}
